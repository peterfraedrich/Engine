#!/usr/bin/python
from os import path
from os import rename
from datetime import datetime as dt
import ConfigParser
import argparse
from flask import Flask, request
import uuid
import json
from pynginxconfig import NginxConfig

######################################### SETUP

# initiate app as Flask() instance
app = Flask(__name__)
nginx = NginxConfig()
local_config = 'engine.conf'

# def global vars
gc = {} # global config from configparser

# simple timestamp in string format
def ts():
    # timestamp
    return dt.now().strftime('%Y/%m/%d %H:%M:%S.%f')

# logging function
def log(msg, code, err=' '):
    # first run
    if str(gc['firstrun']) == '1':
        f = open(gc['logpath'], 'w')
        f.write(ts() + ' :: 000 :: Initialized the log file.\n')
        f.close()

    # log rotate
    if path.getsize(gc['logpath']) >= 6553600:
        new_path = gc['logpath'], gc['logpath'] + '.' + ts()
        rename(new_path)
        f = open(gc['logpath'], 'w')
        f.write('Rotated the logs. Archive log at ' + new_path + '\n')
        f.close()
    # logger
    f = open(gc['logpath'], 'a')
    log_msg = ts() + ' :: ' + code + ' :: ' + msg + '[' + err + ']\n'
    f.write(log_msg)
    f.close()
    return

def firstrun():
    gen_auth_key()
    log('Generated auth key.', '000')
    fr = ConfigParser.ConfigParser(allow_no_value=True)
    fr.read(local_config)
    fr.set('engined', 'firstrun', '0')
    with open(local_config, 'wb') as config_file:
        fr.write(config_file)
    return

# load the global config from the engine.conf
def load_config():
    config = ConfigParser.ConfigParser(allow_no_value=True)
    #config.read(local_config)
    config.read(local_config)
    gc['firstrun'] = config.get('engined', 'firstrun')
    gc['logpath'] = config.get('engined', 'logpath')
    gc['authkey'] = config.get('global', 'auth_key')
    gc['nginx_conf'] = config.get('global', 'nginx_conf')
    return

# create random string for our lazy authorization token
def gen_auth_key():
    t = uuid.uuid4()
    key = str(t).split('-')
    keyLong = key[0] + key[1] + key[2] + key[3] + key[4]
    fr = ConfigParser.ConfigParser(allow_no_value=True)
    #fr.read(local_config) ## LINUX
    fr.read(local_config)
    fr.set('global', 'auth_key', keyLong[-8:])
    #with open(local_config, 'wb') as config_file:
    with open(local_config, 'wb') as config_file:
        fr.write(config_file)
    return

def conf_to_string(path):
    f = open(path, 'r')
    l = f.readlines()
    c = ''
    for i in l:
        c = c + i
    return c


######################################### LOGIC
def check_auth_key(ukey):
    if str(ukey) == gc['authkey']:
        return 0
    else:
        return 1

def load_nginx_conf():
    nginx.load(conf_to_string(gc['nginx_conf']))


######################################### ROUTES
@app.route('/config/api')
def route_gc():
    return json.dumps(gc, indent=4)

@app.route('/config/nginx')
def route_nginx():
    return load_nginx_conf()

@app.route('/upstream/add/<stream>')
def route_add(stream):
    try:
        ukey = request.args.get('auth_key')
        server = request.args.get('server')
        if ukey == None or server == None:
            return 'Missing parameters! Could not add host to upstream pool.'
    except Exception as e:
        return 'Missing parameters! Could not add host to upstream pool.'
    print ukey, gc['authkey']
    if check_auth_key(ukey) == 1:
        return 'Authentication error! You arent allowed to do that, man.'
    else:
        return 'hey there'

if __name__ == '__main__':
    load_config()
    if str(gc['firstrun']) == '1':
        firstrun()
        load_config()
    app.debug = True
    app.run(host='0.0.0.0', port=80)
